#! /bin/bash
#
# BDII system startup script
# $Id: bdii,v 1.9 2009/06/18 14:26:52 lfield Exp $
# chkconfig: 345 95 5
# description: BDII Service
# config: /opt/bdii/etc/bdii.conf
shopt -s expand_aliases

if [ -f /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
else
    echo "Error: Cannot source /lib/lsb/init-functions"
fi

prog=bdii
lockfile=/var/lock/subsys/$prog

BDII_CONF=${BDII_CONF:-/opt/bdii/etc/bdii.conf}

if [ -f "${BDII_CONF}" ]; then
    . "${BDII_CONF}"
fi

UPDATE_LOCK_FILE=${UPDATE_LOCK_FILE:-/var/lock/subsys/bdii-update}
SLAPD_LOCK_FILE=${SLAPD_LOCK_FILE:-/var/lock/subsys/bdii-slapd}
UPDATE=${UPDATE:-/opt/bdii/bin/bdii-update}
UPDATE_PID_FILE=${PID_FILE:-/var/run/bdii-update.pid}
SLAPD=${SLAPD:-/usr/sbin/slapd}
SLAPD_PID_FILE=${SLAPD_PID_FILE:-/var/bdii/db/slapd.pid}
SLAPD_CONF=${SLAPD_CONF:-/opt/bdii/etc/bdii-slapd.conf}
SLAPD_PORT=${SLAPD_PORT:-2170}
SLAPD_DB_DIR=${SLAPD_DB_DIR:-/var/bdii/db}
DB_CONFIG=${DB_CONFIG:-/opt/bdii/etc/DB_CONFIG}
BDII_USER=${BDII_USER:-edguser}
BDII_VAR_DIR=${BDII_VAR_DIR:-/var/bdii}
BDII_UPDATE=${BDII_UPDATE:-/opt/bdii/bin/bdii-update}

function start(){

    # Check status
    if [ -f "${SLAPD_LOCK_FILE}" ] || [ -f "${UPDATE_LOCK_FILE}" ] ; then
	echo -n "Starting BDII: " 
	result=$($0 status)
	if [ $? -gt 0 ]; then
	        echo ${result} 1>&2
		exit 1
	else
	    echo "BDII already started"
	    exit 0
	fi
    fi
    
    # Create proxy
    /opt/bdii/bin/bdii-proxy ${BDII_CONF}

     #Initialize the database directory.
     su - ${BDII_USER} -c "rm -f ${SLAPD_DB_DIR}/stats/*"
     su - ${BDII_USER} -c "rm -f ${SLAPD_DB_DIR}/glue2/*"
     su - ${BDII_USER} -c "rm -f ${SLAPD_DB_DIR}/*" 2>/dev/null
     su - ${BDII_USER} -c "rm -f /var/bdii/old.ldif" 2>/dev/null
     su - ${BDII_USER} -c "cp ${DB_CONFIG} ${SLAPD_DB_DIR}"
     su - ${BDII_USER} -c "cp ${DB_CONFIG} ${SLAPD_DB_DIR}/stats/"
     su - ${BDII_USER} -c "cp ${DB_CONFIG} ${SLAPD_DB_DIR}/glue2/"

     echo -n "Starting SLAPD: " 
     ${SLAPD} -f ${SLAPD_CONF} -h ldap://$(hostname -f):${SLAPD_PORT} -u ${BDII_USER}
     touch ${SLAPD_LOCK_FILE}
     if [ ! -f "${SLAPD_PID_FILE}" ]; then 
	 sleep 2
     fi

     if [ -f "${SLAPD_PID_FILE}" ]; then 
	 ps $(cat ${SLAPD_PID_FILE}) >/dev/null 2>&1   
	 RETVAL=$?
     else
	 RETVAL=1
     fi

     if [ ${RETVAL} -gt 0 ]; then
    	 echo -n "SLAPD failed to start" 1>&2
	 rm -f ${SLAPD_LOCK_FILE}
	 eval log_failure_msg
	 echo
	 return 1
     else
	 eval log_success_msg
	 echo
     fi


     su - ${BDII_USER} -c "${BDII_UPDATE} -c ${BDII_CONF} -d"
     touch ${UPDATE_LOCK_FILE}

     if [ ! -f ${BDII_VAR_DIR}/bdii-update.pid ]; then
         sleep 2
     fi
     if [ -f ${BDII_VAR_DIR}/bdii-update.pid ]; then
         mv ${BDII_VAR_DIR}/bdii-update.pid ${UPDATE_PID_FILE}
         ps $(cat ${UPDATE_PID_FILE}) >/dev/null 2>&1
         RETVAL=$?
     else
         RETVAL=1
     fi

     echo -n "Starting update process: "
     if [ ${RETVAL} -gt 0 ]; then
         echo -n "Update process failed to start" 1>&2
	 rm -f ${UPDATE_LOCK_FILE}
	 eval log__failure_msg
         echo
         return 1
     else
         eval log_success_msg
         echo
         touch $lockfile
	 return 0
     fi
}

function stop(){

    # Check the existance of the lock file
    if [ ! -f "${SLAPD_LOCK_FILE}" ] &&  [ ! -f "${UPDATE_LOCK_FILE}" ]; then
	echo -n "Stopping BDII: "
	result=$($0 status)
	if [ $? -gt 0 ]; then
	        echo ${result} 1>&2
		return 1
	else
	    echo "BDII Already stopped"
	    return 0
	fi
    fi

    RETVAL=0

    echo -n "Stopping update process: " 

    if [ -f "${UPDATE_PID_FILE}" ]; then 
	UPDATE_PID=$(cat ${UPDATE_PID_FILE})
    fi

    su - ${BDII_USER} -c "kill -15 ${UPDATE_PID}" 2>/dev/null
    if [ -n "${UPDATE_PID}" ]; then
	ps ${UPDATE_PID} >/dev/null 2>&1
	if [ $? = 0 ]; then 
	    sleep 2	
	    ps ${UPDATE_PID} >/dev/null 2>&1
	    if [ $? = 0 ]; then 
		su - ${BDII_USER} -c "kill -9 ${UPDATE_PID}" 2>/dev/null
		sleep 2
		ps ${UPDATE_PID} >/dev/null 2>&1
		if [ $? = 0 ]; then 
		    echo -n "Could not kill update process ${UPDATE_PID}" 1>&2
		    RETVAL=1
		fi
	    fi
	    
	fi
    fi
    
    if [ ${RETVAL} = 0 ];  then
	rm -f ${UPDATE_PID_FILE}
	rm -f ${UPDATE_LOCK_FILE}
	eval log_success_msg
	echo
    else
	eval log_failure_msg
	echo
    fi

    echo -n "Stopping SLAPD: " 

    if [ -f "${SLAPD_PID_FILE}" ]; then 
	SLAPD_PID=$(cat ${SLAPD_PID_FILE})
    fi

    su - ${BDII_USER} -c "kill -15 ${SLAPD_PID}" 2>/dev/null
    if [ -n "${SLAPD_PID}" ]; then
	ps ${SLAPD_PID} >/dev/null 2>&1
	if [ $? = 0 ]; then 
	    sleep 2	
	    ps ${SLAPD_PID} >/dev/null 2>&1
	    if [ $? = 0 ]; then 
		su - ${BDII_USER} -c "kill -9 ${SLAPD_PID}" 2>/dev/null
		sleep 2
		ps ${SLAPD_PID} >/dev/null 2>&1
		if [ $? = 0 ]; then 
		    echo -n "Could not kill slapd process ${SLAPD_PID}" 1>&2
		    RETVAL=2
		else
		    rm -f {SLAPD_PID_FILE}
		fi
		
	    fi
	fi
    fi

    if [ ${RETVAL} = 2 ];  then
	eval log_failure_msg
	echo
    else
	rm -f ${SLAPD_LOCK_FILE}
	eval log_success_msg
	echo
    fi

    if [ ! ${RETVAL} = 0 ];  then
	return 1
    else
	rm -f $lockfile
	return 0
    fi
}

function status(){

    if [ ! -f "${SLAPD_LOCK_FILE}" ] && [ ! -f "${UPDATE_LOCK_FILE}" ]; then
        echo -n "BDII Stopped"
	eval log_success_msg
	echo
        return 0
    fi

      if [ -f ${SLAPD_PID_FILE} ]; then 
	ps $(cat ${SLAPD_PID_FILE}) >/dev/null 2>&1
	if [ ! $? = 0 ]; then
	    echo -n "SLAPD PID file exists but the process died" 1>&2
	    eval log_failure _msg
	    echo
	    return 1
	fi
    else
	echo -n "SLAPD PID file ${SLAPD_PID_FILE} does not exist" 1>&2
	eval log_failure_msg
	echo
	return 1
    fi

    if [ -f ${UPDATE_PID_FILE} ]; then 
	ps $(cat ${UPDATE_PID_FILE}) >/dev/null 2>&1
	if [ ! $? = 0 ]; then
	    echo -n "Update process died" 1>&2
	    eval log_failure_msg
	    echo
	    return 1
	fi
    else
	echo -n "Update process failed to start" 1>&2
	eval log_failure_msg
	echo
	return 1
    fi

    echo -n "BDII Runnning "
    eval log_success_msg
    echo
    return 0
}

case "$1" in
    start)
        start
	RETVAL=$?
	;;
    stop)
        stop
        RETVAL=$?
        ;;
    status)
        status
        RETVAL=$?
	;;
    restart)
        stop
	start
        RETVAL=$?
        ;;
    condrestart)
        if [ -f ${SLAPD_LOCK_FILE} ] || [ -f ${UPDATE_LOCK_FILE} ]; then
            stop
            start
            RETVAL=$?
	fi
        ;;
    *)
        echo $"Usage: $0 {start|stop|restart|status|condrestart}"
        RETVAL=1
esac

exit ${RETVAL}
